/*
 * Generated by gdbus-codegen 2.30.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __DBUS_KORVA_DBUS_INTERFACE_H__
#define __DBUS_KORVA_DBUS_INTERFACE_H__

#include <gio/gio.h>
#include "typedefs.h"
#include "gdbusinterfaceskeleton.h"

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.jensge.Korva.Controller1 */

#define KORVA_TYPE_CONTROLLER1 (korva_controller1_get_type ())
#define KORVA_CONTROLLER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), KORVA_TYPE_CONTROLLER1, KorvaController1))
#define KORVA_IS_CONTROLLER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), KORVA_TYPE_CONTROLLER1))
#define KORVA_CONTROLLER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), KORVA_TYPE_CONTROLLER1, KorvaController1Iface))

struct _KorvaController1;
typedef struct _KorvaController1 KorvaController1;
typedef struct _KorvaController1Iface KorvaController1Iface;

struct _KorvaController1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_device_info) (
    KorvaController1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_UID);

  gboolean (*handle_get_devices) (
    KorvaController1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_push) (
    KorvaController1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_Source,
    const gchar *arg_UID);

  gboolean (*handle_unshare) (
    KorvaController1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_Tag);

  void (*device_available) (
    KorvaController1 *object,
    GVariant *arg_Device);

  void (*device_unavailable) (
    KorvaController1 *object,
    const gchar *arg_UID);

};

GType korva_controller1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *korva_controller1_interface_info (void);
guint korva_controller1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void korva_controller1_complete_get_devices (
    KorvaController1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *Devices);

void korva_controller1_complete_get_device_info (
    KorvaController1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *DeviceInfo);

void korva_controller1_complete_push (
    KorvaController1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *Tag);

void korva_controller1_complete_unshare (
    KorvaController1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void korva_controller1_emit_device_available (
    KorvaController1 *object,
    GVariant *arg_Device);

void korva_controller1_emit_device_unavailable (
    KorvaController1 *object,
    const gchar *arg_UID);



/* D-Bus method calls: */
void korva_controller1_call_get_devices (
    KorvaController1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean korva_controller1_call_get_devices_finish (
    KorvaController1 *proxy,
    GVariant **out_Devices,
    GAsyncResult *res,
    GError **error);

gboolean korva_controller1_call_get_devices_sync (
    KorvaController1 *proxy,
    GVariant **out_Devices,
    GCancellable *cancellable,
    GError **error);

void korva_controller1_call_get_device_info (
    KorvaController1 *proxy,
    const gchar *arg_UID,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean korva_controller1_call_get_device_info_finish (
    KorvaController1 *proxy,
    GVariant **out_DeviceInfo,
    GAsyncResult *res,
    GError **error);

gboolean korva_controller1_call_get_device_info_sync (
    KorvaController1 *proxy,
    const gchar *arg_UID,
    GVariant **out_DeviceInfo,
    GCancellable *cancellable,
    GError **error);

void korva_controller1_call_push (
    KorvaController1 *proxy,
    GVariant *arg_Source,
    const gchar *arg_UID,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean korva_controller1_call_push_finish (
    KorvaController1 *proxy,
    gchar **out_Tag,
    GAsyncResult *res,
    GError **error);

gboolean korva_controller1_call_push_sync (
    KorvaController1 *proxy,
    GVariant *arg_Source,
    const gchar *arg_UID,
    gchar **out_Tag,
    GCancellable *cancellable,
    GError **error);

void korva_controller1_call_unshare (
    KorvaController1 *proxy,
    const gchar *arg_Tag,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean korva_controller1_call_unshare_finish (
    KorvaController1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean korva_controller1_call_unshare_sync (
    KorvaController1 *proxy,
    const gchar *arg_Tag,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define KORVA_TYPE_CONTROLLER1_PROXY (korva_controller1_proxy_get_type ())
#define KORVA_CONTROLLER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), KORVA_TYPE_CONTROLLER1_PROXY, KorvaController1Proxy))
#define KORVA_CONTROLLER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), KORVA_TYPE_CONTROLLER1_PROXY, KorvaController1ProxyClass))
#define KORVA_CONTROLLER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), KORVA_TYPE_CONTROLLER1_PROXY, KorvaController1ProxyClass))
#define KORVA_IS_CONTROLLER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), KORVA_TYPE_CONTROLLER1_PROXY))
#define KORVA_IS_CONTROLLER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), KORVA_TYPE_CONTROLLER1_PROXY))

typedef struct _KorvaController1Proxy KorvaController1Proxy;
typedef struct _KorvaController1ProxyClass KorvaController1ProxyClass;
typedef struct _KorvaController1ProxyPrivate KorvaController1ProxyPrivate;

struct _KorvaController1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  KorvaController1ProxyPrivate *priv;
};

struct _KorvaController1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType korva_controller1_proxy_get_type (void) G_GNUC_CONST;

void korva_controller1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
KorvaController1 *korva_controller1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
KorvaController1 *korva_controller1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void korva_controller1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
KorvaController1 *korva_controller1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
KorvaController1 *korva_controller1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define KORVA_TYPE_CONTROLLER1_SKELETON (korva_controller1_skeleton_get_type ())
#define KORVA_CONTROLLER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), KORVA_TYPE_CONTROLLER1_SKELETON, KorvaController1Skeleton))
#define KORVA_CONTROLLER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), KORVA_TYPE_CONTROLLER1_SKELETON, KorvaController1SkeletonClass))
#define KORVA_CONTROLLER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), KORVA_TYPE_CONTROLLER1_SKELETON, KorvaController1SkeletonClass))
#define KORVA_IS_CONTROLLER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), KORVA_TYPE_CONTROLLER1_SKELETON))
#define KORVA_IS_CONTROLLER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), KORVA_TYPE_CONTROLLER1_SKELETON))

typedef struct _KorvaController1Skeleton KorvaController1Skeleton;
typedef struct _KorvaController1SkeletonClass KorvaController1SkeletonClass;
typedef struct _KorvaController1SkeletonPrivate KorvaController1SkeletonPrivate;

struct _KorvaController1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  KorvaController1SkeletonPrivate *priv;
};

struct _KorvaController1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType korva_controller1_skeleton_get_type (void) G_GNUC_CONST;

KorvaController1 *korva_controller1_skeleton_new (void);


G_END_DECLS

#endif /* __DBUS_KORVA_DBUS_INTERFACE_H__ */

/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v ../korva/data/Korva.xml -c KorvaController1 org.jensge.Korva.Controller1 -p korva-controller1.h:korva-controller1.cpp
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KORVA_CONTROLLER1_H_1333022779
#define KORVA_CONTROLLER1_H_1333022779

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtCore/QVariantList>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.jensge.Korva.Controller1
 */
class KorvaController1: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.jensge.Korva.Controller1"; }

public:
    KorvaController1(const QString &service = QLatin1String("org.jensge.Korva"), const QString &path = QLatin1String("/org/jensge/Korva"), const QDBusConnection &connection = QDBusConnection::sessionBus(), QObject *parent = 0);
    ~KorvaController1();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QVariantMap> GetDeviceInfo(const QString &UID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(UID);
        return asyncCallWithArgumentList(QLatin1String("GetDeviceInfo"), argumentList);
    }

    inline QDBusPendingReply<> GetDevices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetDevices"), argumentList);
    }

    inline QDBusPendingReply<> Push(const QVariantMap &Source, const QString &UID)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(Source) << qVariantFromValue(UID);
        return asyncCallWithArgumentList(QLatin1String("Push"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void DeviceAvailable(const QVariantMap &Device);
    void DeviceUnavailable(const QString &UID);
};

namespace org {
  namespace jensge {
    namespace Korva {
      typedef ::KorvaController1 Controller1;
    }
  }
}

Q_DECLARE_METATYPE(QList<QVariantMap>)

#endif
